{"ast":null,"code":"var _jsxFileName = \"A:\\\\Work\\\\PersonalDevelopment\\\\03 {React API}\\\\api_app\\\\src\\\\components\\\\FriendsSection.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { ListOfFriends } from \"../api/queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FriendsSection(_ref) {\n  _s();\n  let {\n    ID\n  } = _ref;\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(ListOfFriends(ID));\n  const td = new Date();\n  const today = td.getFullYear() + \"-\" + (td.getMonth() + 1) + \"-\" + td.getDate();\n  function getYear(id) {\n    //Return actual year from DB\n  }\n  function SortDates() {\n    //Seperate past and future dates:\n    //Future dates stay in the same year\n    data.firends.map(fr => {\n      if (compare(today, fr.date_of_birth)) {}\n    });\n\n    //Past dates get pushed to the next year\n\n    //Dates get sorted\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Friends ... \", today.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"error\",\n      children: \" ERROR \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this) : data.firends.map(fr => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [fr.Nickname ? fr.Nickname : fr.friend.Username, /*#__PURE__*/_jsxDEV(\"p\", {\n        children: fr.friend.date_of_birth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this);\n}\n_s(FriendsSection, \"p6oyfP/Yk4ZuNTXZyHZn/tpJfv0=\", false, function () {\n  return [useQuery];\n});\n_c = FriendsSection;\nexport default FriendsSection;\nvar _c;\n$RefreshReg$(_c, \"FriendsSection\");","map":{"version":3,"names":["useQuery","React","ListOfFriends","FriendsSection","ID","loading","data","error","td","Date","today","getFullYear","getMonth","getDate","getYear","id","SortDates","firends","map","fr","compare","date_of_birth","toString","Nickname","friend","Username"],"sources":["A:/Work/PersonalDevelopment/03 {React API}/api_app/src/components/FriendsSection.tsx"],"sourcesContent":["import { useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ListOfFriends, ThisUser } from \"../api/queries\";\r\n\r\ntype Friend = {\r\n\tNickname: string;\r\n\tfriend: {\r\n\t\tID: number;\r\n\t\tUsername: string;\r\n\t\tdate_of_birth: string;\r\n\t};\r\n};\r\n\r\nfunction FriendsSection({ ID }: { ID: number }) {\r\n\tconst { loading, data, error } = useQuery(ListOfFriends(ID));\r\n\r\n\tconst td = new Date();\r\n\tconst today =\r\n\t\ttd.getFullYear() + \"-\" + (td.getMonth() + 1) + \"-\" + td.getDate();\r\n\r\n\tfunction getYear(id: number) {\r\n\t\t//Return actual year from DB\r\n\t}\r\n\r\n\tfunction SortDates() {\r\n\t\t//Seperate past and future dates:\r\n\t\t//Future dates stay in the same year\r\n\t\tdata.firends.map((fr: Friend) => {\r\n\t\t\tif (compare(today, fr.date_of_birth)) {\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t//Past dates get pushed to the next year\r\n\r\n\t\t//Dates get sorted\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3>Friends ... {today.toString()}</h3>\r\n\t\t\t{loading ? (\r\n\t\t\t\t<p>loading...</p>\r\n\t\t\t) : error ? (\r\n\t\t\t\t<span className=\"error\"> ERROR </span>\r\n\t\t\t) : (\r\n\t\t\t\tdata.firends.map((fr: Friend) => (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{fr.Nickname ? fr.Nickname : fr.friend.Username}\r\n\t\t\t\t\t\t<p>{fr.friend.date_of_birth}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default FriendsSection;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAkB,gBAAgB;AAAC;AAWzD,SAASC,cAAc,OAAyB;EAAA;EAAA,IAAxB;IAAEC;EAAmB,CAAC;EAC7C,MAAM;IAAEC,OAAO;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAGP,QAAQ,CAACE,aAAa,CAACE,EAAE,CAAC,CAAC;EAE5D,MAAMI,EAAE,GAAG,IAAIC,IAAI,EAAE;EACrB,MAAMC,KAAK,GACVF,EAAE,CAACG,WAAW,EAAE,GAAG,GAAG,IAAIH,EAAE,CAACI,QAAQ,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGJ,EAAE,CAACK,OAAO,EAAE;EAElE,SAASC,OAAO,CAACC,EAAU,EAAE;IAC5B;EACD;EAEA,SAASC,SAAS,GAAG;IACpB;IACA;IACAV,IAAI,CAACW,OAAO,CAACC,GAAG,CAAEC,EAAU,IAAK;MAChC,IAAIC,OAAO,CAACV,KAAK,EAAES,EAAE,CAACE,aAAa,CAAC,EAAE,CACtC;IACD,CAAC,CAAC;;IAEF;;IAEA;EACD;;EAEA,oBACC;IAAA,wBACC;MAAA,2BAAiBX,KAAK,CAACY,QAAQ,EAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,EACtCjB,OAAO,gBACP;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,GACdE,KAAK,gBACR;MAAM,SAAS,EAAC,OAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAe,GAEtCD,IAAI,CAACW,OAAO,CAACC,GAAG,CAAEC,EAAU,iBAC3B;MAAA,WACEA,EAAE,CAACI,QAAQ,GAAGJ,EAAE,CAACI,QAAQ,GAAGJ,EAAE,CAACK,MAAM,CAACC,QAAQ,eAC/C;QAAA,UAAIN,EAAE,CAACK,MAAM,CAACH;MAAa;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAEjC,CACD;EAAA;IAAA;IAAA;IAAA;EAAA,QACI;AAER;AAAC,GAzCQlB,cAAc;EAAA,QACWH,QAAQ;AAAA;AAAA,KADjCG,cAAc;AA2CvB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module"}