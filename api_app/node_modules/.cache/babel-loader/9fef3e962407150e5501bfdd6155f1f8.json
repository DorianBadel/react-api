{"ast":null,"code":"const finalhandler = require(\"finalhandler\");\nconst {\n  generateFieldsToMaskMap\n} = require(\"./maskFields\");\nconst {\n  sendExpressPayloadToTreblle,\n  sendKoaPayloadToTreblle\n} = require(\"./sender\");\n\n/**\n * Adds the Treblle middleware to the app.\n *\n * @param {object} app Express app\n * @param {object} settings\n * @param {string} settings.apiKey Treblle API key\n * @param {string} settings.projectId Treblle Project ID\n * @param {string[]?} settings.additionalFieldsToMask specify additional fields to hide\n * @param {boolean?} settings.showErrors controls error logging when sending data to Treblle\n * @returns {object} updated Express app\n */\nconst useTreblle = function (app, _ref) {\n  let {\n    apiKey,\n    projectId,\n    additionalFieldsToMask = [],\n    showErrors = true\n  } = _ref;\n  const fieldsToMaskMap = generateFieldsToMaskMap(additionalFieldsToMask);\n  patchApp(app, {\n    apiKey,\n    projectId,\n    fieldsToMaskMap,\n    showErrors\n  });\n  app.use(TreblleMiddleware({\n    apiKey,\n    projectId,\n    fieldsToMaskMap,\n    showErrors\n  }));\n  return app;\n};\n\n/**\n * Takes the express app and overrides it's methods\n * so we can integrate Treblle middleware into it.\n *\n * @param {object} app Express app\n * @param {object} settings\n * @param {string} settings.apiKey Treblle API key\n * @param {string} settings.projectId Treblle Project ID\n * @param {object} settings.additionalFieldsToMask specificy additional fields to hide\n * @returns {undefined}\n */\nfunction patchApp(app, _ref2) {\n  let {\n    apiKey,\n    projectId,\n    fieldsToMaskMap,\n    showErrors\n  } = _ref2;\n  // we need to overwrite the default send to be able to access the response body\n  const originalSend = app.response.send;\n  app.response.send = function sendOverWrite(body) {\n    originalSend.call(this, body);\n    // this is a workaround so we can access the response body\n    this.__treblle_body_response = body;\n  };\n\n  // We override ExpressJS's app.handle function to avoid having to register our own error handling middleware,\n  // This way we do things a bit more hacky but the user doesn't have to register 2 middlewares: a regular one and a error handling one.\n  app.handle = function handle(req, res, callback) {\n    var router = this._router;\n    let self = this;\n    function expandedLogError(error) {\n      sendExpressPayloadToTreblle(req, res, {\n        error,\n        apiKey,\n        projectId,\n        fieldsToMaskMap,\n        // in case of error the request time will be faulty\n        requestStartTime: process.hrtime(),\n        showErrors\n      });\n      logerror.call(self, error);\n    }\n\n    // final handler\n    var done = callback || finalhandler(req, res, {\n      env: this.get(\"env\"),\n      onerror: expandedLogError\n    });\n\n    // no routes\n    if (!router) {\n      debug(\"no routes defined on app\");\n      done();\n      return;\n    }\n    router.handle(req, res, done);\n  };\n}\nfunction TreblleMiddleware(_ref3) {\n  let {\n    apiKey,\n    projectId,\n    fieldsToMaskMap,\n    showErrors\n  } = _ref3;\n  return function _TreblleMiddlewareHandler(req, res, next) {\n    try {\n      const requestStartTime = process.hrtime();\n      res.on(\"finish\", function () {\n        if (res.statusCode === 500 || res.statusMessage === \"Internal Server Error\") {\n          // This prevents duplicate payload sending to Treblle API in case we have an error.\n          // The error will get caught by the app.handle's error handler.\n          return next();\n        }\n        sendExpressPayloadToTreblle(req, res, {\n          apiKey,\n          projectId,\n          requestStartTime,\n          fieldsToMaskMap,\n          showErrors\n        });\n      });\n    } catch (err) {\n      console.error(err);\n    } finally {\n      next && next();\n    }\n  };\n}\n\n/**\n * Treblle middleware for koa.\n *\n * @param {string} apiKey Treblle API key\n * @param {string} projectId Treblle Project ID\n * @param {string[]?} additionalFieldsToMask specify additional fields to hide\n * @param {boolean?} showErrors controls error logging when sending data to Treblle\n * @returns {function} koa middleware function\n */\nfunction koaTreblle(_ref4) {\n  let {\n    apiKey,\n    projectId,\n    additionalFieldsToMask = [],\n    showErrors = true\n  } = _ref4;\n  const fieldsToMaskMap = generateFieldsToMaskMap(additionalFieldsToMask);\n  return async function (ctx, next) {\n    return koaMiddlewareFn({\n      ctx,\n      next,\n      apiKey,\n      projectId,\n      fieldsToMaskMap,\n      showErrors\n    });\n  };\n}\n\n/**\n * Treblle middleware for strapi.\n *\n * @param {string} apiKey Treblle API key\n * @param {string} projectId Treblle Project ID\n * @param {string[]?} additionalFieldsToMask specify additional fields to hide\n * @param {boolean?} showErrors controls error logging when sending data to Treblle\n * @param {string[]} ignoreAdminRoutes controls logging /admin routes\n * @returns {function} koa middleware function\n */\nfunction strapiTreblle(_ref5) {\n  let {\n    apiKey,\n    projectId,\n    additionalFieldsToMask = [],\n    showErrors = true,\n    ignoreAdminRoutes = [\"admin\", \"content-type-builder\", \"content-manager\"]\n  } = _ref5;\n  const fieldsToMaskMap = generateFieldsToMaskMap(additionalFieldsToMask);\n  return async function (ctx, next) {\n    // option to ignore admin routes since everything is served via koa\n    const [_, path] = ctx.request.url.split(\"/\");\n    if (ignoreAdminRoutes.includes(path)) {\n      return next();\n    }\n    return koaMiddlewareFn({\n      ctx,\n      next,\n      apiKey,\n      projectId,\n      fieldsToMaskMap,\n      showErrors\n    });\n  };\n}\nasync function koaMiddlewareFn(_ref6) {\n  let {\n    ctx,\n    next,\n    apiKey,\n    projectId,\n    fieldsToMaskMap,\n    showErrors\n  } = _ref6;\n  const requestStartTime = process.hrtime();\n  try {\n    await next();\n    sendKoaPayloadToTreblle(ctx, {\n      apiKey,\n      projectId,\n      requestStartTime,\n      fieldsToMaskMap,\n      showErrors\n    });\n  } catch (error) {\n    sendKoaPayloadToTreblle(ctx, {\n      apiKey,\n      projectId,\n      requestStartTime,\n      fieldsToMaskMap,\n      showErrors,\n      error\n    });\n    throw error;\n  }\n}\nfunction logerror(err) {\n  /* istanbul ignore next */\n  if (this.get(\"env\") !== \"test\") console.error(err.stack || err.toString());\n}\nmodule.exports = {\n  useTreblle,\n  koaTreblle,\n  strapiTreblle\n};","map":{"version":3,"names":["finalhandler","require","generateFieldsToMaskMap","sendExpressPayloadToTreblle","sendKoaPayloadToTreblle","useTreblle","app","apiKey","projectId","additionalFieldsToMask","showErrors","fieldsToMaskMap","patchApp","use","TreblleMiddleware","originalSend","response","send","sendOverWrite","body","call","__treblle_body_response","handle","req","res","callback","router","_router","self","expandedLogError","error","requestStartTime","process","hrtime","logerror","done","env","get","onerror","debug","_TreblleMiddlewareHandler","next","on","statusCode","statusMessage","err","console","koaTreblle","ctx","koaMiddlewareFn","strapiTreblle","ignoreAdminRoutes","_","path","request","url","split","includes","stack","toString","module","exports"],"sources":["A:/Work/PersonalDevelopment/03 {React API}/api_app/node_modules/treblle/src/treblle.js"],"sourcesContent":["const finalhandler = require(\"finalhandler\");\nconst { generateFieldsToMaskMap } = require(\"./maskFields\");\nconst {\n  sendExpressPayloadToTreblle,\n  sendKoaPayloadToTreblle,\n} = require(\"./sender\");\n\n/**\n * Adds the Treblle middleware to the app.\n *\n * @param {object} app Express app\n * @param {object} settings\n * @param {string} settings.apiKey Treblle API key\n * @param {string} settings.projectId Treblle Project ID\n * @param {string[]?} settings.additionalFieldsToMask specify additional fields to hide\n * @param {boolean?} settings.showErrors controls error logging when sending data to Treblle\n * @returns {object} updated Express app\n */\nconst useTreblle = function (\n  app,\n  { apiKey, projectId, additionalFieldsToMask = [], showErrors = true }\n) {\n  const fieldsToMaskMap = generateFieldsToMaskMap(additionalFieldsToMask);\n  patchApp(app, { apiKey, projectId, fieldsToMaskMap, showErrors });\n  app.use(\n    TreblleMiddleware({ apiKey, projectId, fieldsToMaskMap, showErrors })\n  );\n\n  return app;\n};\n\n/**\n * Takes the express app and overrides it's methods\n * so we can integrate Treblle middleware into it.\n *\n * @param {object} app Express app\n * @param {object} settings\n * @param {string} settings.apiKey Treblle API key\n * @param {string} settings.projectId Treblle Project ID\n * @param {object} settings.additionalFieldsToMask specificy additional fields to hide\n * @returns {undefined}\n */\nfunction patchApp(app, { apiKey, projectId, fieldsToMaskMap, showErrors }) {\n  // we need to overwrite the default send to be able to access the response body\n  const originalSend = app.response.send;\n  app.response.send = function sendOverWrite(body) {\n    originalSend.call(this, body);\n    // this is a workaround so we can access the response body\n    this.__treblle_body_response = body;\n  };\n\n  // We override ExpressJS's app.handle function to avoid having to register our own error handling middleware,\n  // This way we do things a bit more hacky but the user doesn't have to register 2 middlewares: a regular one and a error handling one.\n  app.handle = function handle(req, res, callback) {\n    var router = this._router;\n    let self = this;\n\n    function expandedLogError(error) {\n      sendExpressPayloadToTreblle(req, res, {\n        error,\n        apiKey,\n        projectId,\n        fieldsToMaskMap,\n        // in case of error the request time will be faulty\n        requestStartTime: process.hrtime(),\n        showErrors,\n      });\n\n      logerror.call(self, error);\n    }\n\n    // final handler\n    var done =\n      callback ||\n      finalhandler(req, res, {\n        env: this.get(\"env\"),\n        onerror: expandedLogError,\n      });\n\n    // no routes\n    if (!router) {\n      debug(\"no routes defined on app\");\n      done();\n      return;\n    }\n\n    router.handle(req, res, done);\n  };\n}\n\nfunction TreblleMiddleware({ apiKey, projectId, fieldsToMaskMap, showErrors }) {\n  return function _TreblleMiddlewareHandler(req, res, next) {\n    try {\n      const requestStartTime = process.hrtime();\n\n      res.on(\"finish\", function () {\n        if (\n          res.statusCode === 500 ||\n          res.statusMessage === \"Internal Server Error\"\n        ) {\n          // This prevents duplicate payload sending to Treblle API in case we have an error.\n          // The error will get caught by the app.handle's error handler.\n          return next();\n        }\n\n        sendExpressPayloadToTreblle(req, res, {\n          apiKey,\n          projectId,\n          requestStartTime,\n          fieldsToMaskMap,\n          showErrors,\n        });\n      });\n    } catch (err) {\n      console.error(err);\n    } finally {\n      next && next();\n    }\n  };\n}\n\n/**\n * Treblle middleware for koa.\n *\n * @param {string} apiKey Treblle API key\n * @param {string} projectId Treblle Project ID\n * @param {string[]?} additionalFieldsToMask specify additional fields to hide\n * @param {boolean?} showErrors controls error logging when sending data to Treblle\n * @returns {function} koa middleware function\n */\nfunction koaTreblle({\n  apiKey,\n  projectId,\n  additionalFieldsToMask = [],\n  showErrors = true,\n}) {\n  const fieldsToMaskMap = generateFieldsToMaskMap(additionalFieldsToMask);\n\n  return async function (ctx, next) {\n    return koaMiddlewareFn({\n      ctx,\n      next,\n      apiKey,\n      projectId,\n      fieldsToMaskMap,\n      showErrors,\n    });\n  };\n}\n\n/**\n * Treblle middleware for strapi.\n *\n * @param {string} apiKey Treblle API key\n * @param {string} projectId Treblle Project ID\n * @param {string[]?} additionalFieldsToMask specify additional fields to hide\n * @param {boolean?} showErrors controls error logging when sending data to Treblle\n * @param {string[]} ignoreAdminRoutes controls logging /admin routes\n * @returns {function} koa middleware function\n */\nfunction strapiTreblle({\n  apiKey,\n  projectId,\n  additionalFieldsToMask = [],\n  showErrors = true,\n  ignoreAdminRoutes = [\"admin\", \"content-type-builder\", \"content-manager\"],\n}) {\n  const fieldsToMaskMap = generateFieldsToMaskMap(additionalFieldsToMask);\n\n  return async function (ctx, next) {\n    // option to ignore admin routes since everything is served via koa\n    const [_, path] = ctx.request.url.split(\"/\");\n    if (ignoreAdminRoutes.includes(path)) {\n      return next();\n    }\n\n    return koaMiddlewareFn({\n      ctx,\n      next,\n      apiKey,\n      projectId,\n      fieldsToMaskMap,\n      showErrors,\n    });\n  };\n}\n\nasync function koaMiddlewareFn({\n  ctx,\n  next,\n  apiKey,\n  projectId,\n  fieldsToMaskMap,\n  showErrors,\n}) {\n  const requestStartTime = process.hrtime();\n\n  try {\n    await next();\n    sendKoaPayloadToTreblle(ctx, {\n      apiKey,\n      projectId,\n      requestStartTime,\n      fieldsToMaskMap,\n      showErrors,\n    });\n  } catch (error) {\n    sendKoaPayloadToTreblle(ctx, {\n      apiKey,\n      projectId,\n      requestStartTime,\n      fieldsToMaskMap,\n      showErrors,\n      error,\n    });\n    throw error;\n  }\n}\n\nfunction logerror(err) {\n  /* istanbul ignore next */\n  if (this.get(\"env\") !== \"test\") console.error(err.stack || err.toString());\n}\n\nmodule.exports = {\n  useTreblle,\n  koaTreblle,\n  strapiTreblle,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}