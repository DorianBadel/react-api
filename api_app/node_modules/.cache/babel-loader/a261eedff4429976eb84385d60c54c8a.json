{"ast":null,"code":"const {\n  sendPayload\n} = require(\"./send-payload\");\nconst {\n  generateFieldsToMaskMap\n} = require(\"../maskFields\");\nconst serviceWorkerTreblle = function (_ref) {\n  let {\n    apiKey,\n    projectId,\n    additionalFieldsToMask = [],\n    showErrors = true\n  } = _ref;\n  const fieldsToMaskMap = generateFieldsToMaskMap(additionalFieldsToMask);\n  return fetch => {\n    return event => {\n      let requestStartTime;\n      let respondWith;\n      let requestClone;\n      try {\n        requestStartTime = Date.now();\n        requestClone = event.request.clone();\n        respondWith = event.respondWith.bind(event);\n      } catch (err) {\n        console.error(\"Error in Treblle middleware while cloning request\", err);\n      }\n      event.respondWith = function (responsePromise) {\n        respondWith(async function () {\n          let response;\n          const requestEndTime = Date.now();\n          try {\n            response = await responsePromise;\n            try {\n              await sendPayload(requestClone, response.clone(), {\n                apiKey,\n                projectId,\n                fieldsToMaskMap,\n                showErrors,\n                requestExecutionTime: requestEndTime - requestStartTime,\n                error: null\n              });\n            } catch (err) {\n              // Just catch and log Treblle error - we do not want to crash app on Treblle's failure\n              console.error(\"Error occurred when sending payload to Treblle, have you set appropriate headers for your content type?\", err);\n            }\n          } catch (err) {\n            try {\n              await sendPayload(requestClone, null, {\n                apiKey,\n                projectId,\n                fieldsToMaskMap,\n                showErrors,\n                requestExecutionTime: requestEndTime - requestStartTime,\n                error: err\n              });\n            } catch (err) {\n              // Just catch and log Treblle error - we do not want to crash app on Treblle's failure\n              console.error(\"Error occurred when sending payload to Treblle.\", err);\n            }\n            throw err;\n          }\n          return response;\n        }());\n      };\n      let error;\n      try {\n        fetch(event);\n      } catch (err) {\n        const requestEndTime = Date.now();\n        error = err;\n        sendPayload(requestClone, null, {\n          apiKey,\n          projectId,\n          fieldsToMaskMap,\n          showErrors,\n          requestExecutionTime: requestEndTime - requestStartTime,\n          error\n        }).catch(err => {\n          // Just catch and log Treblle error - we do not want to crash app on Treblle's failure\n          console.error(\"Error occurred when sending payload to Treblle\", err);\n        });\n        throw error;\n      }\n    };\n  };\n};\nmodule.exports = {\n  serviceWorkerTreblle\n};","map":{"version":3,"names":["sendPayload","require","generateFieldsToMaskMap","serviceWorkerTreblle","apiKey","projectId","additionalFieldsToMask","showErrors","fieldsToMaskMap","fetch","event","requestStartTime","respondWith","requestClone","Date","now","request","clone","bind","err","console","error","responsePromise","response","requestEndTime","requestExecutionTime","catch","module","exports"],"sources":["A:/Work/PersonalDevelopment/03 {React API}/api_app/node_modules/treblle/src/cloudflare-workers/service-worker-treblle.js"],"sourcesContent":["const { sendPayload } = require(\"./send-payload\");\nconst { generateFieldsToMaskMap } = require(\"../maskFields\");\n\nconst serviceWorkerTreblle = function ({\n  apiKey,\n  projectId,\n  additionalFieldsToMask = [],\n  showErrors = true,\n}) {\n  const fieldsToMaskMap = generateFieldsToMaskMap(additionalFieldsToMask);\n  return (fetch) => {\n    return (event) => {\n      let requestStartTime;\n      let respondWith;\n      let requestClone;\n      try {\n        requestStartTime = Date.now();\n        requestClone = event.request.clone();\n        respondWith = event.respondWith.bind(event);\n      } catch (err) {\n        console.error(\"Error in Treblle middleware while cloning request\", err);\n      }\n      event.respondWith = function (responsePromise) {\n        respondWith(\n          (async function () {\n            let response;\n            const requestEndTime = Date.now();\n            try {\n              response = await responsePromise;\n              try {\n                await sendPayload(requestClone, response.clone(), {\n                  apiKey,\n                  projectId,\n                  fieldsToMaskMap,\n                  showErrors,\n                  requestExecutionTime: requestEndTime - requestStartTime,\n                  error: null,\n                });\n              } catch (err) {\n                // Just catch and log Treblle error - we do not want to crash app on Treblle's failure\n                console.error(\n                  \"Error occurred when sending payload to Treblle, have you set appropriate headers for your content type?\",\n                  err\n                );\n              }\n            } catch (err) {\n              try {\n                await sendPayload(requestClone, null, {\n                  apiKey,\n                  projectId,\n                  fieldsToMaskMap,\n                  showErrors,\n                  requestExecutionTime: requestEndTime - requestStartTime,\n                  error: err,\n                });\n              } catch (err) {\n                // Just catch and log Treblle error - we do not want to crash app on Treblle's failure\n                console.error(\n                  \"Error occurred when sending payload to Treblle.\",\n                  err\n                );\n              }\n              throw err;\n            }\n            return response;\n          })()\n        );\n      };\n      let error;\n      try {\n        fetch(event);\n      } catch (err) {\n        const requestEndTime = Date.now();\n        error = err;\n        sendPayload(requestClone, null, {\n          apiKey,\n          projectId,\n          fieldsToMaskMap,\n          showErrors,\n          requestExecutionTime: requestEndTime - requestStartTime,\n          error,\n        }).catch((err) => {\n          // Just catch and log Treblle error - we do not want to crash app on Treblle's failure\n          console.error(\"Error occurred when sending payload to Treblle\", err);\n        });\n        throw error;\n      }\n    };\n  };\n};\n\nmodule.exports = {\n  serviceWorkerTreblle,\n};\n"],"mappings":"AAAA,MAAM;EAAEA;AAAY,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACjD,MAAM;EAAEC;AAAwB,CAAC,GAAGD,OAAO,CAAC,eAAe,CAAC;AAE5D,MAAME,oBAAoB,GAAG,gBAK1B;EAAA,IALoC;IACrCC,MAAM;IACNC,SAAS;IACTC,sBAAsB,GAAG,EAAE;IAC3BC,UAAU,GAAG;EACf,CAAC;EACC,MAAMC,eAAe,GAAGN,uBAAuB,CAACI,sBAAsB,CAAC;EACvE,OAAQG,KAAK,IAAK;IAChB,OAAQC,KAAK,IAAK;MAChB,IAAIC,gBAAgB;MACpB,IAAIC,WAAW;MACf,IAAIC,YAAY;MAChB,IAAI;QACFF,gBAAgB,GAAGG,IAAI,CAACC,GAAG,EAAE;QAC7BF,YAAY,GAAGH,KAAK,CAACM,OAAO,CAACC,KAAK,EAAE;QACpCL,WAAW,GAAGF,KAAK,CAACE,WAAW,CAACM,IAAI,CAACR,KAAK,CAAC;MAC7C,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,mDAAmD,EAAEF,GAAG,CAAC;MACzE;MACAT,KAAK,CAACE,WAAW,GAAG,UAAUU,eAAe,EAAE;QAC7CV,WAAW,CACR,kBAAkB;UACjB,IAAIW,QAAQ;UACZ,MAAMC,cAAc,GAAGV,IAAI,CAACC,GAAG,EAAE;UACjC,IAAI;YACFQ,QAAQ,GAAG,MAAMD,eAAe;YAChC,IAAI;cACF,MAAMtB,WAAW,CAACa,YAAY,EAAEU,QAAQ,CAACN,KAAK,EAAE,EAAE;gBAChDb,MAAM;gBACNC,SAAS;gBACTG,eAAe;gBACfD,UAAU;gBACVkB,oBAAoB,EAAED,cAAc,GAAGb,gBAAgB;gBACvDU,KAAK,EAAE;cACT,CAAC,CAAC;YACJ,CAAC,CAAC,OAAOF,GAAG,EAAE;cACZ;cACAC,OAAO,CAACC,KAAK,CACX,yGAAyG,EACzGF,GAAG,CACJ;YACH;UACF,CAAC,CAAC,OAAOA,GAAG,EAAE;YACZ,IAAI;cACF,MAAMnB,WAAW,CAACa,YAAY,EAAE,IAAI,EAAE;gBACpCT,MAAM;gBACNC,SAAS;gBACTG,eAAe;gBACfD,UAAU;gBACVkB,oBAAoB,EAAED,cAAc,GAAGb,gBAAgB;gBACvDU,KAAK,EAAEF;cACT,CAAC,CAAC;YACJ,CAAC,CAAC,OAAOA,GAAG,EAAE;cACZ;cACAC,OAAO,CAACC,KAAK,CACX,iDAAiD,EACjDF,GAAG,CACJ;YACH;YACA,MAAMA,GAAG;UACX;UACA,OAAOI,QAAQ;QACjB,CAAC,EAAG,CACL;MACH,CAAC;MACD,IAAIF,KAAK;MACT,IAAI;QACFZ,KAAK,CAACC,KAAK,CAAC;MACd,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZ,MAAMK,cAAc,GAAGV,IAAI,CAACC,GAAG,EAAE;QACjCM,KAAK,GAAGF,GAAG;QACXnB,WAAW,CAACa,YAAY,EAAE,IAAI,EAAE;UAC9BT,MAAM;UACNC,SAAS;UACTG,eAAe;UACfD,UAAU;UACVkB,oBAAoB,EAAED,cAAc,GAAGb,gBAAgB;UACvDU;QACF,CAAC,CAAC,CAACK,KAAK,CAAEP,GAAG,IAAK;UAChB;UACAC,OAAO,CAACC,KAAK,CAAC,gDAAgD,EAAEF,GAAG,CAAC;QACtE,CAAC,CAAC;QACF,MAAME,KAAK;MACb;IACF,CAAC;EACH,CAAC;AACH,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG;EACfzB;AACF,CAAC"},"metadata":{},"sourceType":"script"}